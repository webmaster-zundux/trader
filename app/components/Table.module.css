.TableWrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  position: relative;
  height: 100%;
  overflow: auto;
}

.TableContainer {
  display: flex;
  flex-direction: column;
  width: 100%;
  overflow: auto;
  height: 100%;
}

.Table {
  width: 100%;
  border-collapse: collapse;
}

.TableHeaderContainer {
  display: flex;
  background-color: light-dark(#ccc, #414141);
  color: var(--text-color);
  margin-bottom: 0.25em;
  align-items: center;
  justify-content: space-between;
  gap: 0 1em;
  padding: 0.3em 0.5em;
  border-radius: var(--border-radius);
  position: relative;
  flex-wrap: wrap;
}

.TableHeaderLeftPart {
  display: flex;
  flex-direction: row;
  gap: 1em;
  align-items: center;
}

.TableHeaderRightPart {
  display: flex;
  flex-direction: row;
  gap: 0.5em;
  align-items: center;
}

.TableItemsQuantity {
  display: flex;
  position: relative;
  font-size: 0.9em;
  flex-shrink: 0;
}

.TableTitle {
  font-weight: bold;
  text-transform: capitalize;
  margin: 0;
  display: flex;
  flex-shrink: 0;
  font-size: 1.05em;
}

.TableTitleActonButtons {
  display: flex;
  flex-direction: row;
  gap: 0.5em;
  align-items: center;
}

.TableFilterActonButtons {
  display: flex;
  flex-direction: row;
  gap: 0.5em;
  align-items: center;
  position: relative;
  margin-left: 0.25em;
}

@media screen and (width <=480px) {
  .TableHeaderContainer button {
    width: 100%;
  }
}


.TableHead {
  position: sticky;
  top: 0;
  z-index: 1;
  background-color: light-dark(#d5d5d5, #33373a);
}

.Row {
  border-top: 0.1em solid var(--background-color);
  border-bottom: 0.1em solid var(--background-color);
  position: relative;
}


tbody:has(.Cell.CellCheckbox input:checked) {
  background: repeating-linear-gradient(315deg, var(--background-line-color) 0, var(--background-line-color) 4px, transparent 6px, transparent 10px);
}

tbody:has(.Cell.CellCheckbox input:checked) .Row:has(.Cell.CellCheckbox input:not(:checked)) {
  background: var(--background-color);
}

.Row:has(.Cell.CellCheckbox input:checked)::after {
  position: absolute;
  content: '';
  height: 100%;
  width: 0.2em;
  background-color: #525252;
  top: 0;
  left: 0;
}

.Row:hover .Cell {
  background-color: light-dark(#bbb, #494949) !important;
}


@keyframes highlight-row {
  0% {
    background-color: transparent;
  }

  16.6% {
    background-color: light-dark(hsl(0deg 0% 20% / 30%), hsl(0deg 0% 80% / 30%));
  }

  33.3% {
    background-color: transparent;
  }

  49.9% {
    background-color: light-dark(hsl(0deg 0% 20% / 20%), hsl(0deg 0% 80% / 20%));
  }

  66.6% {
    background-color: transparent;
  }

  83.3% {
    background-color: light-dark(hsl(0deg 0% 20% / 10%), hsl(0deg 0% 80% / 10%));
  }

  100% {
    background-color: transparent;
  }
}

.HighlightRow .Cell {
  background-color: light-dark(hsl(0deg 0% 20% / 30%), hsl(0deg 0% 80% / 30%));
}

.HighlightRowBlinking {
  animation-name: highlight-row;
  animation-duration: 5s;
  animation-timing-function: ease;
  animation-iteration-count: infinite; 
}



.HeaderCell {
  position: relative;
  padding: 0;
  font-size: 0.9em;
}

.HeaderCell:first-child {
  border-top-left-radius: var(--border-radius);
  border-bottom-left-radius: var(--border-radius);
  padding-left: 0;
}

.HeaderCell:last-child {
  border-top-right-radius: var(--border-radius);
  border-bottom-right-radius: var(--border-radius);
  padding-left: 0;
}

.TableContainerWithVisibleScrollbar .HeaderCell:last-child {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.HeaderCell::after {
  content: "";
  display: flex;
  position: absolute;
  top: 50%;
  right: -0.1em;
  background-color: rgb(155 155 155);
  width: 0.05em;
  height: 60%;
  transform: translateY(-50%);
}

.HeaderCell:last-child::after {
  display: none;
}

.HeaderCell button:disabled {
  color: var(--text-color) !important;
}

.HeaderCellContentWrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: row;
  padding: 0.25em 0.5em;
}



.HeaderCellAlignToLeft .HeaderCellContentWrapper {
  justify-content: left;
}

.HeaderCellAlignToCenter .HeaderCellContentWrapper {
  justify-content: center;
}

.HeaderCellAlignToRight .HeaderCellContentWrapper {
  justify-content: right;
}

.HeaderCell.HeaderCellCheckbox {
  width: 1.8em;
}

.HeaderCell.HeaderCellCheckbox .HeaderCellContentWrapper {
  padding: 0.25em;
  justify-content: center;
  display: flex;
}


.HeaderCellLabel {
  text-transform: capitalize;
  font-weight: 500;
  white-space: nowrap;
}

.HeaderCellSortingIcon {
  margin-left: 0.25em;
  width: 1em;
  position: relative;
  display: flex;
}

.HeaderCellSortingIcon.AscDirectionIcon {
  top: 0.072em;

}

.HeaderCellSortingIcon.DescDirectionIcon {
  top: -0.1em;
}


.Cell {
  position: relative;
  padding: 0.25em 0.5em;
}

.CellContent {
  display: flex;
  flex-direction: row;
}

.Cell:first-child {
  border-top-left-radius: var(--border-radius);
  border-bottom-left-radius: var(--border-radius);
}

.Cell:last-child {
  border-top-right-radius: var(--border-radius);
  border-bottom-right-radius: var(--border-radius);
}

.TableContainerWithVisibleScrollbar .Cell:last-child {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.Cell.CellCheckbox {
  padding: 0.25em;
  text-align: center;
  width: 1.8em;
}

.Cell::after {
  content: "";
  display: flex;
  position: absolute;
  top: 50%;
  right: -0.1em;
  background-color: rgb(155 155 155);
  width: 0.05em;
  height: 80%;
  transform: translateY(-50%);
}

.Cell:last-child::after {
  display: none;
}

.Cell button:not(:has(svg)) {
  padding: 0 0.5em;
}

.CellValue {
  position: relative;
  text-align: center;
  align-self: center;
  flex-grow: 1;
}

.CellValueLabel {
  display: flex;
}

.CellValueLabel button {
  font-size: 1em;
}

.CellCapitalize button,
.CellCapitalize {
  text-transform: capitalize;
}

.CellUppercase button,
.CellUppercase {
  text-transform: uppercase;
}

.CellFontMonospace button,
.CellFontMonospace {
  font-family: var(--monospace-font-family);
  font-size: 0.9em;
}

.CellNoWrap button,
.CellNoWrap {
  white-space: nowrap;
}

.CellAlignToLeft button,
.CellAlignToLeft {
  text-align: left;
}

.CellAlignToCenter button,
.CellAlignToCenter {
  text-align: center;
}

.CellAlignToRight button,
.CellAlignToRight {
  text-align: right;
}

.CellValueLabelAsLink:hover button,
.CellValueLabelAsLink:focus-visible button {
  text-decoration-line: none !important;
}

.Row:hover .CellValueLabelAsLink button {
  text-decoration-line: underline;
  text-decoration-style: dashed;
  cursor: pointer;
}

.CellActionButtonsGroup {
  display: flex;
  flex-direction: row;
  gap: 0.5em;
  margin: 0 0 0 0.5em;
  align-items: center;
  justify-content: center;
}

.CellActionButtonsGroup a {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: center;
}

.CellActionButtonsGroup button svg,
.CellActionButtonsGroup a svg {
  opacity: 0;
  display: flex;
  width: auto;
  height: 1.4em;
}

.CellActionButtonsGroup a:hover svg,
.CellActionButtonsGroup a:focus-visible svg,
.Row:hover .CellActionButtonsGroup button svg,
.Row:hover .CellActionButtonsGroup a svg {
  opacity: 1;
}

.CellActionButtonsGroup button:enabled:hover svg,
.CellActionButtonsGroup button:enabled:focus-visible svg,
.CellActionButtonsGroup a[href]:hover svg,
.CellActionButtonsGroup a[href]:focus-visible svg {
  opacity: 1;
}

.NoData,
.LoadingData {
  text-align: center;
  padding: 1em 0.25em;
}

.NoData::first-letter,
.LoadingData::first-letter {
  text-transform: capitalize;
}

.NoDataCell {
  color: var(--no-data-text-color);
}

.Row:hover .NoDataCell {
  color: light-dark(#757575, gray);
}
